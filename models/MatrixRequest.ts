/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';
import type { CostingOptions } from './CostingOptions';
import {
    CostingOptionsFromJSON,
    CostingOptionsFromJSONTyped,
    CostingOptionsToJSON,
} from './CostingOptions';
import type { MatrixCostingModel } from './MatrixCostingModel';
import {
    MatrixCostingModelFromJSON,
    MatrixCostingModelFromJSONTyped,
    MatrixCostingModelToJSON,
} from './MatrixCostingModel';
import type { ValhallaLanguages } from './ValhallaLanguages';
import {
    ValhallaLanguagesFromJSON,
    ValhallaLanguagesFromJSONTyped,
    ValhallaLanguagesToJSON,
} from './ValhallaLanguages';

/**
 * 
 * @export
 * @interface MatrixRequest
 */
export interface MatrixRequest {
    /**
     * 
     * @type {string}
     * @memberof MatrixRequest
     */
    units?: MatrixRequestUnitsEnum;
    /**
     * 
     * @type {ValhallaLanguages}
     * @memberof MatrixRequest
     */
    language?: ValhallaLanguages;
    /**
     * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
     * @type {string}
     * @memberof MatrixRequest
     */
    directionsType?: MatrixRequestDirectionsTypeEnum;
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof MatrixRequest
     */
    id?: string;
    /**
     * The list of starting locations
     * @type {Array<Coordinate>}
     * @memberof MatrixRequest
     */
    sources: Array<Coordinate>;
    /**
     * The list of ending locations
     * @type {Array<Coordinate>}
     * @memberof MatrixRequest
     */
    targets: Array<Coordinate>;
    /**
     * 
     * @type {MatrixCostingModel}
     * @memberof MatrixRequest
     */
    costing: MatrixCostingModel;
    /**
     * 
     * @type {CostingOptions}
     * @memberof MatrixRequest
     */
    costingOptions?: CostingOptions;
    /**
     * Only applicable to one-to-many or many-to-one requests. This defaults to all locations. When specified explicitly, this option allows a partial result to be returned. This is basically equivalent to "find the closest/best locations out of the full set." This can have a dramatic improvement for large requests.
     * @type {number}
     * @memberof MatrixRequest
     */
    matrixLocations?: number;
}


/**
 * @export
 */
export const MatrixRequestUnitsEnum = {
    Km: 'km',
    Mi: 'mi'
} as const;
export type MatrixRequestUnitsEnum = typeof MatrixRequestUnitsEnum[keyof typeof MatrixRequestUnitsEnum];

/**
 * @export
 */
export const MatrixRequestDirectionsTypeEnum = {
    None: 'none',
    Maneuvers: 'maneuvers',
    Instructions: 'instructions'
} as const;
export type MatrixRequestDirectionsTypeEnum = typeof MatrixRequestDirectionsTypeEnum[keyof typeof MatrixRequestDirectionsTypeEnum];


/**
 * Check if a given object implements the MatrixRequest interface.
 */
export function instanceOfMatrixRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sources" in value;
    isInstance = isInstance && "targets" in value;
    isInstance = isInstance && "costing" in value;

    return isInstance;
}

export function MatrixRequestFromJSON(json: any): MatrixRequest {
    return MatrixRequestFromJSONTyped(json, false);
}

export function MatrixRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatrixRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'units': !exists(json, 'units') ? undefined : json['units'],
        'language': !exists(json, 'language') ? undefined : ValhallaLanguagesFromJSON(json['language']),
        'directionsType': !exists(json, 'directions_type') ? undefined : json['directions_type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'sources': ((json['sources'] as Array<any>).map(CoordinateFromJSON)),
        'targets': ((json['targets'] as Array<any>).map(CoordinateFromJSON)),
        'costing': MatrixCostingModelFromJSON(json['costing']),
        'costingOptions': !exists(json, 'costing_options') ? undefined : CostingOptionsFromJSON(json['costing_options']),
        'matrixLocations': !exists(json, 'matrix_locations') ? undefined : json['matrix_locations'],
    };
}

export function MatrixRequestToJSON(value?: MatrixRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'units': value.units,
        'language': ValhallaLanguagesToJSON(value.language),
        'directions_type': value.directionsType,
        'id': value.id,
        'sources': ((value.sources as Array<any>).map(CoordinateToJSON)),
        'targets': ((value.targets as Array<any>).map(CoordinateToJSON)),
        'costing': MatrixCostingModelToJSON(value.costing),
        'costing_options': CostingOptionsToJSON(value.costingOptions),
        'matrix_locations': value.matrixLocations,
    };
}

