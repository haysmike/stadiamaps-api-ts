/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CostingModel } from './CostingModel';
import {
    CostingModelFromJSON,
    CostingModelFromJSONTyped,
    CostingModelToJSON,
} from './CostingModel';
import type { CostingOptions } from './CostingOptions';
import {
    CostingOptionsFromJSON,
    CostingOptionsFromJSONTyped,
    CostingOptionsToJSON,
} from './CostingOptions';
import type { RoutingWaypoint } from './RoutingWaypoint';
import {
    RoutingWaypointFromJSON,
    RoutingWaypointFromJSONTyped,
    RoutingWaypointToJSON,
} from './RoutingWaypoint';
import type { ValhallaLanguages } from './ValhallaLanguages';
import {
    ValhallaLanguagesFromJSON,
    ValhallaLanguagesFromJSONTyped,
    ValhallaLanguagesToJSON,
} from './ValhallaLanguages';

/**
 * 
 * @export
 * @interface RouteRequest
 */
export interface RouteRequest {
    /**
     * 
     * @type {string}
     * @memberof RouteRequest
     */
    units?: RouteRequestUnitsEnum;
    /**
     * 
     * @type {ValhallaLanguages}
     * @memberof RouteRequest
     */
    language?: ValhallaLanguages;
    /**
     * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
     * @type {string}
     * @memberof RouteRequest
     */
    directionsType?: RouteRequestDirectionsTypeEnum;
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof RouteRequest
     */
    id?: string;
    /**
     * 
     * @type {Array<RoutingWaypoint>}
     * @memberof RouteRequest
     */
    locations: Array<RoutingWaypoint>;
    /**
     * 
     * @type {CostingModel}
     * @memberof RouteRequest
     */
    costing: CostingModel;
    /**
     * 
     * @type {CostingOptions}
     * @memberof RouteRequest
     */
    costingOptions?: CostingOptions;
    /**
     * 
     * @type {Array<RoutingWaypoint>}
     * @memberof RouteRequest
     */
    avoidLocations?: Array<RoutingWaypoint>;
    /**
     * One or multiple exterior rings of polygons in the form of nested JSON arrays. Roads intersecting these rings will be avoided during path finding. Open rings will be closed automatically.
     * @type {Array<Array<Array<number>>>}
     * @memberof RouteRequest
     */
    avoidPolygons?: Array<Array<Array<number>>>;
}


/**
 * @export
 */
export const RouteRequestUnitsEnum = {
    Km: 'km',
    Mi: 'mi'
} as const;
export type RouteRequestUnitsEnum = typeof RouteRequestUnitsEnum[keyof typeof RouteRequestUnitsEnum];

/**
 * @export
 */
export const RouteRequestDirectionsTypeEnum = {
    None: 'none',
    Maneuvers: 'maneuvers',
    Instructions: 'instructions'
} as const;
export type RouteRequestDirectionsTypeEnum = typeof RouteRequestDirectionsTypeEnum[keyof typeof RouteRequestDirectionsTypeEnum];


/**
 * Check if a given object implements the RouteRequest interface.
 */
export function instanceOfRouteRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "locations" in value;
    isInstance = isInstance && "costing" in value;

    return isInstance;
}

export function RouteRequestFromJSON(json: any): RouteRequest {
    return RouteRequestFromJSONTyped(json, false);
}

export function RouteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'units': !exists(json, 'units') ? undefined : json['units'],
        'language': !exists(json, 'language') ? undefined : ValhallaLanguagesFromJSON(json['language']),
        'directionsType': !exists(json, 'directions_type') ? undefined : json['directions_type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'locations': ((json['locations'] as Array<any>).map(RoutingWaypointFromJSON)),
        'costing': CostingModelFromJSON(json['costing']),
        'costingOptions': !exists(json, 'costing_options') ? undefined : CostingOptionsFromJSON(json['costing_options']),
        'avoidLocations': !exists(json, 'avoid_locations') ? undefined : ((json['avoid_locations'] as Array<any>).map(RoutingWaypointFromJSON)),
        'avoidPolygons': !exists(json, 'avoid_polygons') ? undefined : json['avoid_polygons'],
    };
}

export function RouteRequestToJSON(value?: RouteRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'units': value.units,
        'language': ValhallaLanguagesToJSON(value.language),
        'directions_type': value.directionsType,
        'id': value.id,
        'locations': ((value.locations as Array<any>).map(RoutingWaypointToJSON)),
        'costing': CostingModelToJSON(value.costing),
        'costing_options': CostingOptionsToJSON(value.costingOptions),
        'avoid_locations': value.avoidLocations === undefined ? undefined : ((value.avoidLocations as Array<any>).map(RoutingWaypointToJSON)),
        'avoid_polygons': value.avoidPolygons,
    };
}

