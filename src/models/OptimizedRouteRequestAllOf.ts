/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';
import type { CostingOptions } from './CostingOptions';
import {
    CostingOptionsFromJSON,
    CostingOptionsFromJSONTyped,
    CostingOptionsToJSON,
} from './CostingOptions';
import type { MatrixCostingModel } from './MatrixCostingModel';
import {
    MatrixCostingModelFromJSON,
    MatrixCostingModelFromJSONTyped,
    MatrixCostingModelToJSON,
} from './MatrixCostingModel';

/**
 * 
 * @export
 * @interface OptimizedRouteRequestAllOf
 */
export interface OptimizedRouteRequestAllOf {
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof OptimizedRouteRequestAllOf
     */
    id?: string;
    /**
     * The list of locations. The first and last are assumed to be the start and end points, and all intermediate points are locations that you want to visit along the way.
     * @type {Array<Coordinate>}
     * @memberof OptimizedRouteRequestAllOf
     */
    locations?: Array<Coordinate>;
    /**
     * 
     * @type {MatrixCostingModel}
     * @memberof OptimizedRouteRequestAllOf
     */
    costing?: MatrixCostingModel;
    /**
     * 
     * @type {CostingOptions}
     * @memberof OptimizedRouteRequestAllOf
     */
    costingOptions?: CostingOptions;
}

/**
 * Check if a given object implements the OptimizedRouteRequestAllOf interface.
 */
export function instanceOfOptimizedRouteRequestAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OptimizedRouteRequestAllOfFromJSON(json: any): OptimizedRouteRequestAllOf {
    return OptimizedRouteRequestAllOfFromJSONTyped(json, false);
}

export function OptimizedRouteRequestAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizedRouteRequestAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'locations': !exists(json, 'locations') ? undefined : ((json['locations'] as Array<any>).map(CoordinateFromJSON)),
        'costing': !exists(json, 'costing') ? undefined : MatrixCostingModelFromJSON(json['costing']),
        'costingOptions': !exists(json, 'costing_options') ? undefined : CostingOptionsFromJSON(json['costing_options']),
    };
}

export function OptimizedRouteRequestAllOfToJSON(value?: OptimizedRouteRequestAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'locations': value.locations === undefined ? undefined : ((value.locations as Array<any>).map(CoordinateToJSON)),
        'costing': MatrixCostingModelToJSON(value.costing),
        'costing_options': CostingOptionsToJSON(value.costingOptions),
    };
}

