/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BikeNetwork } from './BikeNetwork';
import {
    BikeNetworkFromJSON,
    BikeNetworkFromJSONTyped,
    BikeNetworkToJSON,
} from './BikeNetwork';

/**
 * 
 * @export
 * @interface LocateEdgeInfo
 */
export interface LocateEdgeInfo {
    /**
     * The mean elevation, in meters, relative to sea level.
     * @type {number}
     * @memberof LocateEdgeInfo
     */
    meanElevation?: number;
    /**
     * An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm). Note that the polyline is always encoded with 6 digits of precision, whereas most implementations default to 5.
     * @type {string}
     * @memberof LocateEdgeInfo
     */
    shape?: string;
    /**
     * A list of names that the edge goes by.
     * @type {Array<string>}
     * @memberof LocateEdgeInfo
     */
    names?: Array<string>;
    /**
     * 
     * @type {BikeNetwork}
     * @memberof LocateEdgeInfo
     */
    bikeNetwork?: BikeNetwork;
    /**
     * 
     * @type {number}
     * @memberof LocateEdgeInfo
     */
    wayId?: number;
}

/**
 * Check if a given object implements the LocateEdgeInfo interface.
 */
export function instanceOfLocateEdgeInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocateEdgeInfoFromJSON(json: any): LocateEdgeInfo {
    return LocateEdgeInfoFromJSONTyped(json, false);
}

export function LocateEdgeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocateEdgeInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meanElevation': !exists(json, 'mean_elevation') ? undefined : json['mean_elevation'],
        'shape': !exists(json, 'shape') ? undefined : json['shape'],
        'names': !exists(json, 'names') ? undefined : json['names'],
        'bikeNetwork': !exists(json, 'bike_network') ? undefined : BikeNetworkFromJSON(json['bike_network']),
        'wayId': !exists(json, 'way_id') ? undefined : json['way_id'],
    };
}

export function LocateEdgeInfoToJSON(value?: LocateEdgeInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mean_elevation': value.meanElevation,
        'shape': value.shape,
        'names': value.names,
        'bike_network': BikeNetworkToJSON(value.bikeNetwork),
        'way_id': value.wayId,
    };
}

