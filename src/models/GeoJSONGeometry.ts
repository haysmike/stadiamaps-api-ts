/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications. All endpoints are versioned individually to allow for granular upgrades. We follow the [Semantic Versioning scheme](https://semver.org/).
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    GeoJSONLineString,
    instanceOfGeoJSONLineString,
    GeoJSONLineStringFromJSON,
    GeoJSONLineStringFromJSONTyped,
    GeoJSONLineStringToJSON,
} from './GeoJSONLineString';
import {
    GeoJSONPoint,
    instanceOfGeoJSONPoint,
    GeoJSONPointFromJSON,
    GeoJSONPointFromJSONTyped,
    GeoJSONPointToJSON,
} from './GeoJSONPoint';

/**
 * @type GeoJSONGeometry
 * 
 * @export
 */
export type GeoJSONGeometry = { type: 'LineString' } & GeoJSONLineString | { type: 'Point' } & GeoJSONPoint;

export function GeoJSONGeometryFromJSON(json: any): GeoJSONGeometry {
    return GeoJSONGeometryFromJSONTyped(json, false);
}

export function GeoJSONGeometryFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONGeometry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'LineString':
            return {...GeoJSONLineStringFromJSONTyped(json, true), type: 'LineString'};
        case 'Point':
            return {...GeoJSONPointFromJSONTyped(json, true), type: 'Point'};
        default:
            throw new Error(`No variant of GeoJSONGeometry exists with 'type=${json['type']}'`);
    }
}

export function GeoJSONGeometryToJSON(value?: GeoJSONGeometry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'LineString':
            return GeoJSONLineStringToJSON(value);
        case 'Point':
            return GeoJSONPointToJSON(value);
        default:
            throw new Error(`No variant of GeoJSONGeometry exists with 'type=${value['type']}'`);
    }

}

