/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.3
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EdgeUse } from './EdgeUse';
import {
    EdgeUseFromJSON,
    EdgeUseFromJSONTyped,
    EdgeUseToJSON,
} from './EdgeUse';
import type { RoadClass } from './RoadClass';
import {
    RoadClassFromJSON,
    RoadClassFromJSONTyped,
    RoadClassToJSON,
} from './RoadClass';
import type { Traversability } from './Traversability';
import {
    TraversabilityFromJSON,
    TraversabilityFromJSONTyped,
    TraversabilityToJSON,
} from './Traversability';

/**
 * 
 * @export
 * @interface IntersectingEdge
 */
export interface IntersectingEdge {
    /**
     * The direction at the beginning of an edge. The units are degrees clockwise from north.
     * @type {number}
     * @memberof IntersectingEdge
     */
    beginHeading?: number;
    /**
     * True if this intersecting edge at the end node has consistent names with the path from the other edge.
     * @type {boolean}
     * @memberof IntersectingEdge
     */
    fromEdgeNameConsistency?: boolean;
    /**
     * True if this intersecting edge at the end node has consistent names with the path to the other edge.
     * @type {boolean}
     * @memberof IntersectingEdge
     */
    toEdgeNameConsistency?: boolean;
    /**
     * 
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    driveability?: Traversability;
    /**
     * 
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    cyclability?: Traversability;
    /**
     * 
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    walkability?: Traversability;
    /**
     * 
     * @type {EdgeUse}
     * @memberof IntersectingEdge
     */
    use?: EdgeUse;
    /**
     * 
     * @type {RoadClass}
     * @memberof IntersectingEdge
     */
    roadClass?: RoadClass;
}

/**
 * Check if a given object implements the IntersectingEdge interface.
 */
export function instanceOfIntersectingEdge(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IntersectingEdgeFromJSON(json: any): IntersectingEdge {
    return IntersectingEdgeFromJSONTyped(json, false);
}

export function IntersectingEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntersectingEdge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'beginHeading': !exists(json, 'begin_heading') ? undefined : json['begin_heading'],
        'fromEdgeNameConsistency': !exists(json, 'from_edge_name_consistency') ? undefined : json['from_edge_name_consistency'],
        'toEdgeNameConsistency': !exists(json, 'to_edge_name_consistency') ? undefined : json['to_edge_name_consistency'],
        'driveability': !exists(json, 'driveability') ? undefined : TraversabilityFromJSON(json['driveability']),
        'cyclability': !exists(json, 'cyclability') ? undefined : TraversabilityFromJSON(json['cyclability']),
        'walkability': !exists(json, 'walkability') ? undefined : TraversabilityFromJSON(json['walkability']),
        'use': !exists(json, 'use') ? undefined : EdgeUseFromJSON(json['use']),
        'roadClass': !exists(json, 'road_class') ? undefined : RoadClassFromJSON(json['road_class']),
    };
}

export function IntersectingEdgeToJSON(value?: IntersectingEdge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'begin_heading': value.beginHeading,
        'from_edge_name_consistency': value.fromEdgeNameConsistency,
        'to_edge_name_consistency': value.toEdgeNameConsistency,
        'driveability': TraversabilityToJSON(value.driveability),
        'cyclability': TraversabilityToJSON(value.cyclability),
        'walkability': TraversabilityToJSON(value.walkability),
        'use': EdgeUseToJSON(value.use),
        'road_class': RoadClassToJSON(value.roadClass),
    };
}

