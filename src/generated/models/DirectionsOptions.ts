/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.3
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DistanceUnit } from './DistanceUnit';
import {
    DistanceUnitFromJSON,
    DistanceUnitFromJSONTyped,
    DistanceUnitToJSON,
} from './DistanceUnit';
import type { ValhallaLanguages } from './ValhallaLanguages';
import {
    ValhallaLanguagesFromJSON,
    ValhallaLanguagesFromJSONTyped,
    ValhallaLanguagesToJSON,
} from './ValhallaLanguages';

/**
 * 
 * @export
 * @interface DirectionsOptions
 */
export interface DirectionsOptions {
    /**
     * 
     * @type {DistanceUnit}
     * @memberof DirectionsOptions
     */
    units?: DistanceUnit;
    /**
     * 
     * @type {ValhallaLanguages}
     * @memberof DirectionsOptions
     */
    language?: ValhallaLanguages;
    /**
     * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
     * @type {string}
     * @memberof DirectionsOptions
     */
    directionsType?: DirectionsOptionsDirectionsTypeEnum;
}


/**
 * @export
 */
export const DirectionsOptionsDirectionsTypeEnum = {
    None: 'none',
    Maneuvers: 'maneuvers',
    Instructions: 'instructions'
} as const;
export type DirectionsOptionsDirectionsTypeEnum = typeof DirectionsOptionsDirectionsTypeEnum[keyof typeof DirectionsOptionsDirectionsTypeEnum];


/**
 * Check if a given object implements the DirectionsOptions interface.
 */
export function instanceOfDirectionsOptions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DirectionsOptionsFromJSON(json: any): DirectionsOptions {
    return DirectionsOptionsFromJSONTyped(json, false);
}

export function DirectionsOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DirectionsOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'units': !exists(json, 'units') ? undefined : DistanceUnitFromJSON(json['units']),
        'language': !exists(json, 'language') ? undefined : ValhallaLanguagesFromJSON(json['language']),
        'directionsType': !exists(json, 'directions_type') ? undefined : json['directions_type'],
    };
}

export function DirectionsOptionsToJSON(value?: DirectionsOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'units': DistanceUnitToJSON(value.units),
        'language': ValhallaLanguagesToJSON(value.language),
        'directions_type': value.directionsType,
    };
}

