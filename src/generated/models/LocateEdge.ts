/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.5
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocateDetailedEdge } from './LocateDetailedEdge';
import {
    LocateDetailedEdgeFromJSON,
    LocateDetailedEdgeFromJSONTyped,
    LocateDetailedEdgeToJSON,
} from './LocateDetailedEdge';
import type { LocateEdgeInfo } from './LocateEdgeInfo';
import {
    LocateEdgeInfoFromJSON,
    LocateEdgeInfoFromJSONTyped,
    LocateEdgeInfoToJSON,
} from './LocateEdgeInfo';
import type { NodeId } from './NodeId';
import {
    NodeIdFromJSON,
    NodeIdFromJSONTyped,
    NodeIdToJSON,
} from './NodeId';

/**
 * 
 * @export
 * @interface LocateEdge
 */
export interface LocateEdge {
    /**
     * 
     * @type {NodeId}
     * @memberof LocateEdge
     */
    edgeId?: NodeId;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    correlatedLat?: number;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    correlatedLon?: number;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    percentAlong?: number;
    /**
     * 
     * @type {string}
     * @memberof LocateEdge
     */
    sideOfStreet?: LocateEdgeSideOfStreetEnum;
    /**
     * A base64-encoded [OpenLR location reference](https://www.openlr-association.com/fileadmin/user_upload/openlr-whitepaper_v1.5.pdf), for a graph edge of the road network matched by the query.
     * @type {string}
     * @memberof LocateEdge
     */
    linearReference?: string;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    outboundReach?: number;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    heading?: number;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    inboundReach?: number;
    /**
     * 
     * @type {number}
     * @memberof LocateEdge
     */
    distance?: number;
    /**
     * Predicted speed information based on historical data. If available, this will include 2016 entries. Each entry represents 5 minutes, where the first entry represents midnight on Monday, the second entry represents 00:05 on Monday, etc.
     * @type {Array<number>}
     * @memberof LocateEdge
     */
    predictedSpeeds?: Array<number>;
    /**
     * 
     * @type {LocateEdgeInfo}
     * @memberof LocateEdge
     */
    edgeInfo?: LocateEdgeInfo;
    /**
     * 
     * @type {LocateDetailedEdge}
     * @memberof LocateEdge
     */
    edge?: LocateDetailedEdge;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocateEdge
     */
    warnings?: Array<string>;
}


/**
 * @export
 */
export const LocateEdgeSideOfStreetEnum = {
    Left: 'left',
    Right: 'right',
    Neither: 'neither'
} as const;
export type LocateEdgeSideOfStreetEnum = typeof LocateEdgeSideOfStreetEnum[keyof typeof LocateEdgeSideOfStreetEnum];


/**
 * Check if a given object implements the LocateEdge interface.
 */
export function instanceOfLocateEdge(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocateEdgeFromJSON(json: any): LocateEdge {
    return LocateEdgeFromJSONTyped(json, false);
}

export function LocateEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocateEdge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'edgeId': !exists(json, 'edge_id') ? undefined : NodeIdFromJSON(json['edge_id']),
        'correlatedLat': !exists(json, 'correlated_lat') ? undefined : json['correlated_lat'],
        'correlatedLon': !exists(json, 'correlated_lon') ? undefined : json['correlated_lon'],
        'percentAlong': !exists(json, 'percent_along') ? undefined : json['percent_along'],
        'sideOfStreet': !exists(json, 'side_of_street') ? undefined : json['side_of_street'],
        'linearReference': !exists(json, 'linear_reference') ? undefined : json['linear_reference'],
        'outboundReach': !exists(json, 'outbound_reach') ? undefined : json['outbound_reach'],
        'heading': !exists(json, 'heading') ? undefined : json['heading'],
        'inboundReach': !exists(json, 'inbound_reach') ? undefined : json['inbound_reach'],
        'distance': !exists(json, 'distance') ? undefined : json['distance'],
        'predictedSpeeds': !exists(json, 'predicted_speeds') ? undefined : json['predicted_speeds'],
        'edgeInfo': !exists(json, 'edge_info') ? undefined : LocateEdgeInfoFromJSON(json['edge_info']),
        'edge': !exists(json, 'edge') ? undefined : LocateDetailedEdgeFromJSON(json['edge']),
        'warnings': !exists(json, 'warnings') ? undefined : json['warnings'],
    };
}

export function LocateEdgeToJSON(value?: LocateEdge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'edge_id': NodeIdToJSON(value.edgeId),
        'correlated_lat': value.correlatedLat,
        'correlated_lon': value.correlatedLon,
        'percent_along': value.percentAlong,
        'side_of_street': value.sideOfStreet,
        'linear_reference': value.linearReference,
        'outbound_reach': value.outboundReach,
        'heading': value.heading,
        'inbound_reach': value.inboundReach,
        'distance': value.distance,
        'predicted_speeds': value.predictedSpeeds,
        'edge_info': LocateEdgeInfoToJSON(value.edgeInfo),
        'edge': LocateDetailedEdgeToJSON(value.edge),
        'warnings': value.warnings,
    };
}

