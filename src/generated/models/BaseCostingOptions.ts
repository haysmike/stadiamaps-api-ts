/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.5
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BaseCostingOptions
 */
export interface BaseCostingOptions {
    /**
     * A penalty (in seconds) applied when transitioning between roads (determined by name).
     * @type {number}
     * @memberof BaseCostingOptions
     */
    maneuverPenalty?: number;
    /**
     * The estimated cost (in seconds) when a gate is encountered.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    gateCost?: number;
    /**
     * A penalty (in seconds) applied to the route cost when a gate is encountered. This penalty can be used to reduce the likelihood of suggesting a route with gates unless absolutely necessary.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    gatePenalty?: number;
    /**
     * The estimated cost (in seconds) when encountering an international border.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    countryCrossingCost?: number;
    /**
     * A penalty applied to transitions to international border crossings. This penalty can be used to reduce the likelihood of suggesting a route with border crossings unless absolutely necessary.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    countryCrossingPenalty?: number;
    /**
     * A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    servicePenalty?: number;
    /**
     * A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    serviceFactor?: number;
    /**
     * A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    useLivingStreets?: number;
    /**
     * A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof BaseCostingOptions
     */
    useFerry?: number;
}

/**
 * Check if a given object implements the BaseCostingOptions interface.
 */
export function instanceOfBaseCostingOptions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BaseCostingOptionsFromJSON(json: any): BaseCostingOptions {
    return BaseCostingOptionsFromJSONTyped(json, false);
}

export function BaseCostingOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseCostingOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maneuverPenalty': !exists(json, 'maneuver_penalty') ? undefined : json['maneuver_penalty'],
        'gateCost': !exists(json, 'gate_cost') ? undefined : json['gate_cost'],
        'gatePenalty': !exists(json, 'gate_penalty') ? undefined : json['gate_penalty'],
        'countryCrossingCost': !exists(json, 'country_crossing_cost') ? undefined : json['country_crossing_cost'],
        'countryCrossingPenalty': !exists(json, 'country_crossing_penalty') ? undefined : json['country_crossing_penalty'],
        'servicePenalty': !exists(json, 'service_penalty') ? undefined : json['service_penalty'],
        'serviceFactor': !exists(json, 'service_factor') ? undefined : json['service_factor'],
        'useLivingStreets': !exists(json, 'use_living_streets') ? undefined : json['use_living_streets'],
        'useFerry': !exists(json, 'use_ferry') ? undefined : json['use_ferry'],
    };
}

export function BaseCostingOptionsToJSON(value?: BaseCostingOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maneuver_penalty': value.maneuverPenalty,
        'gate_cost': value.gateCost,
        'gate_penalty': value.gatePenalty,
        'country_crossing_cost': value.countryCrossingCost,
        'country_crossing_penalty': value.countryCrossingPenalty,
        'service_penalty': value.servicePenalty,
        'service_factor': value.serviceFactor,
        'use_living_streets': value.useLivingStreets,
        'use_ferry': value.useFerry,
    };
}

