/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.3
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TraceAttributeKey } from './TraceAttributeKey';
import {
    TraceAttributeKeyFromJSON,
    TraceAttributeKeyFromJSONTyped,
    TraceAttributeKeyToJSON,
} from './TraceAttributeKey';

/**
 * 
 * @export
 * @interface TraceAttributeFilterOptions
 */
export interface TraceAttributeFilterOptions {
    /**
     * 
     * @type {Array<TraceAttributeKey>}
     * @memberof TraceAttributeFilterOptions
     */
    attributes: Array<TraceAttributeKey>;
    /**
     * Determines whether the list of attributes will be used as a whitelist or a blacklist.
     * @type {string}
     * @memberof TraceAttributeFilterOptions
     */
    action: TraceAttributeFilterOptionsActionEnum;
}


/**
 * @export
 */
export const TraceAttributeFilterOptionsActionEnum = {
    Include: 'include',
    Exclude: 'exclude'
} as const;
export type TraceAttributeFilterOptionsActionEnum = typeof TraceAttributeFilterOptionsActionEnum[keyof typeof TraceAttributeFilterOptionsActionEnum];


/**
 * Check if a given object implements the TraceAttributeFilterOptions interface.
 */
export function instanceOfTraceAttributeFilterOptions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attributes" in value;
    isInstance = isInstance && "action" in value;

    return isInstance;
}

export function TraceAttributeFilterOptionsFromJSON(json: any): TraceAttributeFilterOptions {
    return TraceAttributeFilterOptionsFromJSONTyped(json, false);
}

export function TraceAttributeFilterOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceAttributeFilterOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': ((json['attributes'] as Array<any>).map(TraceAttributeKeyFromJSON)),
        'action': json['action'],
    };
}

export function TraceAttributeFilterOptionsToJSON(value?: TraceAttributeFilterOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': ((value.attributes as Array<any>).map(TraceAttributeKeyToJSON)),
        'action': value.action,
    };
}

