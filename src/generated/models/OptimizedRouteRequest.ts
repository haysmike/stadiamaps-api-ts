/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';
import type { CostingOptions } from './CostingOptions';
import {
    CostingOptionsFromJSON,
    CostingOptionsFromJSONTyped,
    CostingOptionsToJSON,
} from './CostingOptions';
import type { DirectionsOptions } from './DirectionsOptions';
import {
    DirectionsOptionsFromJSON,
    DirectionsOptionsFromJSONTyped,
    DirectionsOptionsToJSON,
} from './DirectionsOptions';
import type { MatrixCostingModel } from './MatrixCostingModel';
import {
    MatrixCostingModelFromJSON,
    MatrixCostingModelFromJSONTyped,
    MatrixCostingModelToJSON,
} from './MatrixCostingModel';

/**
 * 
 * @export
 * @interface OptimizedRouteRequest
 */
export interface OptimizedRouteRequest {
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof OptimizedRouteRequest
     */
    id?: string;
    /**
     * The list of locations. The first and last are assumed to be the start and end points, and all intermediate points are locations that you want to visit along the way.
     * @type {Array<Coordinate>}
     * @memberof OptimizedRouteRequest
     */
    locations: Array<Coordinate>;
    /**
     * 
     * @type {MatrixCostingModel}
     * @memberof OptimizedRouteRequest
     */
    costing: MatrixCostingModel;
    /**
     * 
     * @type {CostingOptions}
     * @memberof OptimizedRouteRequest
     */
    costingOptions?: CostingOptions;
    /**
     * 
     * @type {DirectionsOptions}
     * @memberof OptimizedRouteRequest
     */
    directionsOptions?: DirectionsOptions;
}

/**
 * Check if a given object implements the OptimizedRouteRequest interface.
 */
export function instanceOfOptimizedRouteRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "locations" in value;
    isInstance = isInstance && "costing" in value;

    return isInstance;
}

export function OptimizedRouteRequestFromJSON(json: any): OptimizedRouteRequest {
    return OptimizedRouteRequestFromJSONTyped(json, false);
}

export function OptimizedRouteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizedRouteRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'locations': ((json['locations'] as Array<any>).map(CoordinateFromJSON)),
        'costing': MatrixCostingModelFromJSON(json['costing']),
        'costingOptions': !exists(json, 'costing_options') ? undefined : CostingOptionsFromJSON(json['costing_options']),
        'directionsOptions': !exists(json, 'directions_options') ? undefined : DirectionsOptionsFromJSON(json['directions_options']),
    };
}

export function OptimizedRouteRequestToJSON(value?: OptimizedRouteRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'locations': ((value.locations as Array<any>).map(CoordinateToJSON)),
        'costing': MatrixCostingModelToJSON(value.costing),
        'costing_options': CostingOptionsToJSON(value.costingOptions),
        'directions_options': DirectionsOptionsToJSON(value.directionsOptions),
    };
}

