/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.4
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';
import type { CostingModel } from './CostingModel';
import {
    CostingModelFromJSON,
    CostingModelFromJSONTyped,
    CostingModelToJSON,
} from './CostingModel';
import type { CostingOptions } from './CostingOptions';
import {
    CostingOptionsFromJSON,
    CostingOptionsFromJSONTyped,
    CostingOptionsToJSON,
} from './CostingOptions';
import type { DirectionsOptions } from './DirectionsOptions';
import {
    DirectionsOptionsFromJSON,
    DirectionsOptionsFromJSONTyped,
    DirectionsOptionsToJSON,
} from './DirectionsOptions';

/**
 * 
 * @export
 * @interface NearestRoadsRequest
 */
export interface NearestRoadsRequest {
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof NearestRoadsRequest
     */
    locations: Array<Coordinate>;
    /**
     * 
     * @type {CostingModel}
     * @memberof NearestRoadsRequest
     */
    costing?: CostingModel;
    /**
     * 
     * @type {CostingOptions}
     * @memberof NearestRoadsRequest
     */
    costingOptions?: CostingOptions;
    /**
     * 
     * @type {boolean}
     * @memberof NearestRoadsRequest
     */
    verbose?: boolean;
    /**
     * 
     * @type {DirectionsOptions}
     * @memberof NearestRoadsRequest
     */
    directionsOptions?: DirectionsOptions;
}

/**
 * Check if a given object implements the NearestRoadsRequest interface.
 */
export function instanceOfNearestRoadsRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "locations" in value;

    return isInstance;
}

export function NearestRoadsRequestFromJSON(json: any): NearestRoadsRequest {
    return NearestRoadsRequestFromJSONTyped(json, false);
}

export function NearestRoadsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): NearestRoadsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locations': ((json['locations'] as Array<any>).map(CoordinateFromJSON)),
        'costing': !exists(json, 'costing') ? undefined : CostingModelFromJSON(json['costing']),
        'costingOptions': !exists(json, 'costing_options') ? undefined : CostingOptionsFromJSON(json['costing_options']),
        'verbose': !exists(json, 'verbose') ? undefined : json['verbose'],
        'directionsOptions': !exists(json, 'directions_options') ? undefined : DirectionsOptionsFromJSON(json['directions_options']),
    };
}

export function NearestRoadsRequestToJSON(value?: NearestRoadsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'locations': ((value.locations as Array<any>).map(CoordinateToJSON)),
        'costing': CostingModelToJSON(value.costing),
        'costing_options': CostingOptionsToJSON(value.costingOptions),
        'verbose': value.verbose,
        'directions_options': DirectionsOptionsToJSON(value.directionsOptions),
    };
}

