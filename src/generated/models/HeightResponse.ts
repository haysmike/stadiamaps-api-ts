/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.4
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';

/**
 * 
 * @export
 * @interface HeightResponse
 */
export interface HeightResponse {
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof HeightResponse
     */
    id?: string;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof HeightResponse
     */
    shape?: Array<Coordinate>;
    /**
     * The input polyline.
     * @type {string}
     * @memberof HeightResponse
     */
    encodedPolyline?: string;
    /**
     * The list of heights for each point, in meters. Present if `range` is `false`.
     * @type {Array<number>}
     * @memberof HeightResponse
     */
    height?: Array<number>;
    /**
     * The list of horizontal distances and heights (respectively) for each point, in meters. Present if `range` is `true`.
     * @type {Array<Array<number>>}
     * @memberof HeightResponse
     */
    rangeHeight?: Array<Array<number>>;
}

/**
 * Check if a given object implements the HeightResponse interface.
 */
export function instanceOfHeightResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HeightResponseFromJSON(json: any): HeightResponse {
    return HeightResponseFromJSONTyped(json, false);
}

export function HeightResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): HeightResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'shape': !exists(json, 'shape') ? undefined : ((json['shape'] as Array<any>).map(CoordinateFromJSON)),
        'encodedPolyline': !exists(json, 'encoded_polyline') ? undefined : json['encoded_polyline'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'rangeHeight': !exists(json, 'range_height') ? undefined : json['range_height'],
    };
}

export function HeightResponseToJSON(value?: HeightResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'shape': value.shape === undefined ? undefined : ((value.shape as Array<any>).map(CoordinateToJSON)),
        'encoded_polyline': value.encodedPolyline,
        'height': value.height,
        'range_height': value.rangeHeight,
    };
}

