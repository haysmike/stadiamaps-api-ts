/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoadClass } from './RoadClass';
import {
    RoadClassFromJSON,
    RoadClassFromJSONTyped,
    RoadClassToJSON,
} from './RoadClass';

/**
 * 
 * @export
 * @interface RoutingWaypointAllOfSearchFilter
 */
export interface RoutingWaypointAllOfSearchFilter {
    /**
     * Excludes roads marked as tunnels
     * @type {boolean}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    excludeTunnel?: boolean;
    /**
     * Excludes roads marked as bridges
     * @type {boolean}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    excludeBridge?: boolean;
    /**
     * Excludes roads marked as ramps
     * @type {boolean}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    excludeRamp?: boolean;
    /**
     * Excludes roads marked as closed
     * @type {boolean}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    excludeClosures?: boolean;
    /**
     * 
     * @type {RoadClass}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    minRoadClass?: RoadClass;
    /**
     * 
     * @type {RoadClass}
     * @memberof RoutingWaypointAllOfSearchFilter
     */
    maxRoadClass?: RoadClass;
}

/**
 * Check if a given object implements the RoutingWaypointAllOfSearchFilter interface.
 */
export function instanceOfRoutingWaypointAllOfSearchFilter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingWaypointAllOfSearchFilterFromJSON(json: any): RoutingWaypointAllOfSearchFilter {
    return RoutingWaypointAllOfSearchFilterFromJSONTyped(json, false);
}

export function RoutingWaypointAllOfSearchFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingWaypointAllOfSearchFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'excludeTunnel': !exists(json, 'exclude_tunnel') ? undefined : json['exclude_tunnel'],
        'excludeBridge': !exists(json, 'exclude_bridge') ? undefined : json['exclude_bridge'],
        'excludeRamp': !exists(json, 'exclude_ramp') ? undefined : json['exclude_ramp'],
        'excludeClosures': !exists(json, 'exclude_closures') ? undefined : json['exclude_closures'],
        'minRoadClass': !exists(json, 'min_road_class') ? undefined : RoadClassFromJSON(json['min_road_class']),
        'maxRoadClass': !exists(json, 'max_road_class') ? undefined : RoadClassFromJSON(json['max_road_class']),
    };
}

export function RoutingWaypointAllOfSearchFilterToJSON(value?: RoutingWaypointAllOfSearchFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exclude_tunnel': value.excludeTunnel,
        'exclude_bridge': value.excludeBridge,
        'exclude_ramp': value.excludeRamp,
        'exclude_closures': value.excludeClosures,
        'min_road_class': RoadClassToJSON(value.minRoadClass),
        'max_road_class': RoadClassToJSON(value.maxRoadClass),
    };
}

