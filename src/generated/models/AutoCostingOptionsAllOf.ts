/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.4
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutoCostingOptionsAllOf
 */
export interface AutoCostingOptionsAllOf {
    /**
     * The height of the automobile (in meters).
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    height?: number;
    /**
     * The width of the automobile (in meters).
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    width?: number;
    /**
     * The estimated cost (in seconds) when a toll booth is encountered.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    tollBoothCost?: number;
    /**
     * A penalty (in seconds) applied to the route cost when a toll booth is encountered. This penalty can be used to reduce the likelihood of suggesting a route with toll booths unless absolutely necessary.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    tollBoothPenalty?: number;
    /**
     * The estimated cost (in seconds) when a ferry is encountered.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    ferryCost?: number;
    /**
     * A measure of willingness to take highways. Values near 0 attempt to avoid highways, and values near 1 will favour them. Note that as some routes may be impossible without highways, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    useHighways?: number;
    /**
     * A measure of willingness to take toll roads. Values near 0 attempt to avoid tolls, and values near 1 will favour them. Note that as some routes may be impossible without tolls, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    useTolls?: number;
    /**
     * A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    useTracks?: number;
    /**
     * The top speed (in kph) that the vehicle is capable of travelling.
     * @type {number}
     * @memberof AutoCostingOptionsAllOf
     */
    topSpeed?: number;
    /**
     * If true changes the cost metric to be quasi-shortest (pure distance-based) costing. This will disable ALL other costing factors.
     * @type {boolean}
     * @memberof AutoCostingOptionsAllOf
     */
    shortest?: boolean;
    /**
     * If true, ignores all known closures. This option cannot be set if `location.search_filter.exclude_closures` is also specified.
     * @type {boolean}
     * @memberof AutoCostingOptionsAllOf
     */
    ignoreClosures?: boolean;
    /**
     * If true, indicates the desire to include HOV roads with a 2-occupant requirement in the route when advantageous.
     * @type {boolean}
     * @memberof AutoCostingOptionsAllOf
     */
    includeHov2?: boolean;
    /**
     * If true, indicates the desire to include HOV roads with a 3-occupant requirement in the route when advantageous.
     * @type {boolean}
     * @memberof AutoCostingOptionsAllOf
     */
    includeHov3?: boolean;
    /**
     * If true, indicates the desire to include toll roads which require the driver to pay a toll if the occupant requirement isn't met
     * @type {boolean}
     * @memberof AutoCostingOptionsAllOf
     */
    includeHot?: boolean;
}

/**
 * Check if a given object implements the AutoCostingOptionsAllOf interface.
 */
export function instanceOfAutoCostingOptionsAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoCostingOptionsAllOfFromJSON(json: any): AutoCostingOptionsAllOf {
    return AutoCostingOptionsAllOfFromJSONTyped(json, false);
}

export function AutoCostingOptionsAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoCostingOptionsAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'height': !exists(json, 'height') ? undefined : json['height'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'tollBoothCost': !exists(json, 'toll_booth_cost') ? undefined : json['toll_booth_cost'],
        'tollBoothPenalty': !exists(json, 'toll_booth_penalty') ? undefined : json['toll_booth_penalty'],
        'ferryCost': !exists(json, 'ferry_cost') ? undefined : json['ferry_cost'],
        'useHighways': !exists(json, 'use_highways') ? undefined : json['use_highways'],
        'useTolls': !exists(json, 'use_tolls') ? undefined : json['use_tolls'],
        'useTracks': !exists(json, 'use_tracks') ? undefined : json['use_tracks'],
        'topSpeed': !exists(json, 'top_speed') ? undefined : json['top_speed'],
        'shortest': !exists(json, 'shortest') ? undefined : json['shortest'],
        'ignoreClosures': !exists(json, 'ignore_closures') ? undefined : json['ignore_closures'],
        'includeHov2': !exists(json, 'include_hov2') ? undefined : json['include_hov2'],
        'includeHov3': !exists(json, 'include_hov3') ? undefined : json['include_hov3'],
        'includeHot': !exists(json, 'include_hot') ? undefined : json['include_hot'],
    };
}

export function AutoCostingOptionsAllOfToJSON(value?: AutoCostingOptionsAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'height': value.height,
        'width': value.width,
        'toll_booth_cost': value.tollBoothCost,
        'toll_booth_penalty': value.tollBoothPenalty,
        'ferry_cost': value.ferryCost,
        'use_highways': value.useHighways,
        'use_tolls': value.useTolls,
        'use_tracks': value.useTracks,
        'top_speed': value.topSpeed,
        'shortest': value.shortest,
        'ignore_closures': value.ignoreClosures,
        'include_hov2': value.includeHov2,
        'include_hov3': value.includeHov3,
        'include_hot': value.includeHot,
    };
}

