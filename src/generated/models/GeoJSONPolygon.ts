/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 5.0.3
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GeoJSONPolygon
 */
export interface GeoJSONPolygon {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONPolygon
     */
    type: GeoJSONPolygonTypeEnum;
    /**
     * 
     * @type {Array<Array<Array<number>>>}
     * @memberof GeoJSONPolygon
     */
    coordinates: Array<Array<Array<number>>>;
}


/**
 * @export
 */
export const GeoJSONPolygonTypeEnum = {
    Point: 'Point',
    MultiPoint: 'MultiPoint',
    LineString: 'LineString',
    MultiLineString: 'MultiLineString',
    Polygon: 'Polygon',
    MultiPolygon: 'MultiPolygon'
} as const;
export type GeoJSONPolygonTypeEnum = typeof GeoJSONPolygonTypeEnum[keyof typeof GeoJSONPolygonTypeEnum];


/**
 * Check if a given object implements the GeoJSONPolygon interface.
 */
export function instanceOfGeoJSONPolygon(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "coordinates" in value;

    return isInstance;
}

export function GeoJSONPolygonFromJSON(json: any): GeoJSONPolygon {
    return GeoJSONPolygonFromJSONTyped(json, false);
}

export function GeoJSONPolygonFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeoJSONPolygon {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'coordinates': json['coordinates'],
    };
}

export function GeoJSONPolygonToJSON(value?: GeoJSONPolygon | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'coordinates': value.coordinates,
    };
}

